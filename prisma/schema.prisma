// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resources     Resource[]
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  resources Resource[] // Defining a one-to-many relationship
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
}

model Resource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  url         String
  user        User?    @relation(fields: [userId], references: [id]) // Define a relationship to User
  userId      String?  @map(name: "user_id") @db.ObjectId // Define the foreign key field
  category    Category @relation(fields: [categoryId], references: [id]) // Defining a relationship to Category
  categoryId  String   @map(name: "category_id") @db.ObjectId // Defining the foreign key field
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "resources")
}
